diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2ef0863..e2bf4c9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -766,3 +766,4 @@ endforeach()
 
 # Generate aom.pc and setup install rule.
 setup_aom_install_targets()
+set_source_files_properties("${AOM_ROOT}/av1/common/convolve.c" "${AOM_ROOT}/aom_dsp/aom_convolve.c" PROPERTIES COMPILE_FLAGS "-qopt-report=4 -qopt-report-phase=vec,loop -qopenmp-simd")
diff --git a/aom_dsp/aom_convolve.c b/aom_dsp/aom_convolve.c
index 7879b88..611fa72 100644
--- a/aom_dsp/aom_convolve.c
+++ b/aom_dsp/aom_convolve.c
@@ -38,17 +38,34 @@ static void convolve_horiz(const uint8_t *src, ptrdiff_t src_stride,
                            const InterpKernel *x_filters, int x0_q4,
                            int x_step_q4, int w, int h) {
   src -= SUBPEL_TAPS / 2 - 1;
-  for (int y = 0; y < h; ++y) {
-    int x_q4 = x0_q4;
-    for (int x = 0; x < w; ++x) {
-      const uint8_t *const src_x = &src[x_q4 >> SUBPEL_BITS];
-      const int16_t *const x_filter = x_filters[x_q4 & SUBPEL_MASK];
-      const int sum = horz_scalar_product(src_x, x_filter);
-      dst[x] = clip_pixel(ROUND_POWER_OF_TWO(sum, FILTER_BITS));
-      x_q4 += x_step_q4;
+
+  if (x_step_q4 == (1 << SUBPEL_BITS)) {
+    const int16_t* const x_filter = x_filters[x0_q4 & SUBPEL_MASK];
+    const int x_q4 = x0_q4 >> SUBPEL_BITS;
+    for (int y = 0; y < h; ++y) {
+      const int dst_s = dst_stride * y;
+      const int src_s = src_stride * y + x_q4;
+      #pragma omp simd
+      for (int x = 0; x < w; ++x) {
+        const uint8_t* const src_x = &src[src_s + x];
+        const int sum = horz_scalar_product(src_x, x_filter);
+        dst[x + dst_s] = clip_pixel(ROUND_POWER_OF_TWO(sum, FILTER_BITS));
+      }
+    }
+  } else {
+    #pragma omp simd
+    for (int y = 0; y < h; ++y) {
+      int x_q4 = x0_q4;
+      for (int x = 0; x < w; ++x) {
+         const uint8_t* const src_x = &src[x_q4 >> SUBPEL_BITS];
+         const int16_t* const x_filter = x_filters[x_q4 & SUBPEL_MASK];
+         const int sum = horz_scalar_product(src_x, x_filter);
+         dst[x] = clip_pixel(ROUND_POWER_OF_TWO(sum, FILTER_BITS));
+         x_q4 += x_step_q4;
+      }
+      src += src_stride;
+      dst += dst_stride;
     }
-    src += src_stride;
-    dst += dst_stride;
   }
 }
 
@@ -58,17 +75,33 @@ static void convolve_vert(const uint8_t *src, ptrdiff_t src_stride,
                           int y_step_q4, int w, int h) {
   src -= src_stride * (SUBPEL_TAPS / 2 - 1);
 
-  for (int x = 0; x < w; ++x) {
-    int y_q4 = y0_q4;
-    for (int y = 0; y < h; ++y) {
-      const unsigned char *src_y = &src[(y_q4 >> SUBPEL_BITS) * src_stride];
-      const int16_t *const y_filter = y_filters[y_q4 & SUBPEL_MASK];
-      const int sum = vert_scalar_product(src_y, src_stride, y_filter);
-      dst[y * dst_stride] = clip_pixel(ROUND_POWER_OF_TWO(sum, FILTER_BITS));
-      y_q4 += y_step_q4;
+  if (y_step_q4 == (1 << SUBPEL_BITS)) {
+      const int16_t* const y_filter = y_filters[y0_q4 & SUBPEL_MASK];
+      const int y_q4 = (y0_q4 >> SUBPEL_BITS) * src_stride;
+      #pragma omp simd
+      for (int x = 0; x < w; ++x) {
+          for (int y = 0; y < h; ++y) {
+              const unsigned char* src_y = &src[y_q4 + (y * src_stride)];
+              const int sum = vert_scalar_product(src_y, src_stride, y_filter);
+              dst[y * dst_stride] = clip_pixel(ROUND_POWER_OF_TWO(sum, FILTER_BITS));
+          }
+          ++src;
+          ++dst;
+      }
+  } else {
+    #pragma omp simd
+    for (int x = 0; x < w; ++x) {
+      int y_q4 = y0_q4;
+      for (int y = 0; y < h; ++y) {
+        const unsigned char* src_y = &src[(y_q4 >> SUBPEL_BITS) * src_stride];
+        const int16_t* const y_filter = y_filters[y_q4 & SUBPEL_MASK];
+        const int sum = vert_scalar_product(src_y, src_stride, y_filter);
+        dst[y * dst_stride] = clip_pixel(ROUND_POWER_OF_TWO(sum, FILTER_BITS));
+        y_q4 += y_step_q4;
+      }
+      ++src;
+      ++dst;
     }
-    ++src;
-    ++dst;
   }
 }
 
diff --git a/av1/common/convolve.c b/av1/common/convolve.c
index e177e3c..fcd76b3 100644
--- a/av1/common/convolve.c
+++ b/av1/common/convolve.c
@@ -249,13 +249,15 @@ void av1_dist_wtd_convolve_2d_c(const uint8_t *src, int src_stride,
                                 const InterpFilterParams *filter_params_y,
                                 const int subpel_x_qn, const int subpel_y_qn,
                                 ConvolveParams *conv_params) {
-  CONV_BUF_TYPE *dst16 = conv_params->dst;
-  int dst16_stride = conv_params->dst_stride;
-  int16_t im_block[(MAX_SB_SIZE + MAX_FILTER_TAP - 1) * MAX_SB_SIZE];
-  int im_h = h + filter_params_y->taps - 1;
-  int im_stride = w;
+  CONV_BUF_TYPE * const dst16 = conv_params->dst;
+  const int dst16_stride = conv_params->dst_stride;
+  int16_t im_block[(MAX_SB_SIZE + MAX_FILTER_TAP - 1) * MAX_SB_SIZE] = { 0 };
+  const int im_h = h + filter_params_y->taps - 1;
+  const int im_stride = w;
   const int fo_vert = filter_params_y->taps / 2 - 1;
   const int fo_horiz = filter_params_x->taps / 2 - 1;
+  const int filter_x_taps = filter_params_x->taps;
+  const int filter_y_taps = filter_params_y->taps;
   const int bd = 8;
   const int round_bits =
       2 * FILTER_BITS - conv_params->round_0 - conv_params->round_1;
@@ -264,48 +266,82 @@ void av1_dist_wtd_convolve_2d_c(const uint8_t *src, int src_stride,
   const uint8_t *src_horiz = src - fo_vert * src_stride;
   const int16_t *x_filter = av1_get_interp_filter_subpel_kernel(
       filter_params_x, subpel_x_qn & SUBPEL_MASK);
+
   for (int y = 0; y < im_h; ++y) {
-    for (int x = 0; x < w; ++x) {
-      int32_t sum = (1 << (bd + FILTER_BITS - 1));
-      for (int k = 0; k < filter_params_x->taps; ++k) {
-        sum += x_filter[k] * src_horiz[y * src_stride + x - fo_horiz + k];
+      for (int k = 0; k < filter_x_taps; ++k) {
+          
+          const int fo_horiz_k = fo_horiz - k;
+          for (int x = 0; x < im_stride; ++x) {
+              im_block[y * im_stride + x] += x_filter[k] * src_horiz[y * src_stride + x - fo_horiz_k];
+          }
       }
-      assert(0 <= sum && sum < (1 << (bd + FILTER_BITS + 1)));
-      im_block[y * im_stride + x] =
-          (int16_t)ROUND_POWER_OF_TWO(sum, conv_params->round_0);
-    }
   }
 
+  const int16_t sumx = (1 << (bd + FILTER_BITS - 1));
+
+  for (int i = 0; i < im_h * im_stride; ++i)
+      im_block[i] = (int16_t)ROUND_POWER_OF_TWO(im_block[i] + sumx, conv_params->round_0);
+    
+
   // vertical filter
   int16_t *src_vert = im_block + fo_vert * im_stride;
   const int16_t *y_filter = av1_get_interp_filter_subpel_kernel(
       filter_params_y, subpel_y_qn & SUBPEL_MASK);
   const int offset_bits = bd + 2 * FILTER_BITS - conv_params->round_0;
+
+  int32_t im_block2[(MAX_SB_SIZE + MAX_FILTER_TAP - 1) * MAX_SB_SIZE] = { 0 };
+
+  const int32_t sum = 1 << offset_bits;
+
+  for (int i = 0; i < dst16_stride * h; ++i) {
+      im_block2[i] = sum;
+  }
+
   for (int y = 0; y < h; ++y) {
-    for (int x = 0; x < w; ++x) {
-      int32_t sum = 1 << offset_bits;
-      for (int k = 0; k < filter_params_y->taps; ++k) {
-        sum += y_filter[k] * src_vert[(y - fo_vert + k) * im_stride + x];
+      const int y_idx = y - fo_vert;
+      const int y_dst = y * dst16_stride;
+      for (int k = 0; k < filter_y_taps; ++k) {
+          const int k_idx = (y_idx + k) * im_stride;
+          for (int x = 0; x < im_stride; ++x) {
+              im_block2[y_dst + x] += y_filter[k] * src_vert[k_idx + x];
+          }
       }
-      assert(0 <= sum && sum < (1 << (offset_bits + 2)));
-      CONV_BUF_TYPE res = ROUND_POWER_OF_TWO(sum, conv_params->round_1);
-      if (conv_params->do_average) {
-        int32_t tmp = dst16[y * dst16_stride + x];
-        if (conv_params->use_dist_wtd_comp_avg) {
-          tmp = tmp * conv_params->fwd_offset + res * conv_params->bck_offset;
-          tmp = tmp >> DIST_PRECISION_BITS;
-        } else {
-          tmp += res;
-          tmp = tmp >> 1;
-        }
-        tmp -= (1 << (offset_bits - conv_params->round_1)) +
-               (1 << (offset_bits - conv_params->round_1 - 1));
-        dst[y * dst_stride + x] =
-            clip_pixel(ROUND_POWER_OF_TWO(tmp, round_bits));
+  }
+
+  if (conv_params->do_average) {
+      if (conv_params->use_dist_wtd_comp_avg) {
+          for (int y = 0; y < h; ++y) {
+              const int y_dst = y * dst16_stride;
+              for (int x = 0; x < im_stride; ++x) {
+                  int32_t tmp = dst16[y_dst + x] * conv_params->fwd_offset +
+                      ROUND_POWER_OF_TWO(im_block2[y_dst + x], conv_params->round_1) * conv_params->bck_offset;
+                  tmp >>= DIST_PRECISION_BITS;
+                  tmp -= (1 << (offset_bits - conv_params->round_1)) +
+                      (1 << (offset_bits - conv_params->round_1 - 1));
+                  dst[y * dst_stride + x] =
+                      clip_pixel(ROUND_POWER_OF_TWO(tmp, round_bits));
+              }
+          }
+
       } else {
-        dst16[y * dst16_stride + x] = res;
+#pragma omp simd
+          for (int y = 0; y < h; ++y) {
+              const int y_dst = y * dst16_stride;
+              for (int x = 0; x < im_stride; ++x) {
+                  int32_t tmp = dst16[y_dst + x] + 
+                      ROUND_POWER_OF_TWO(im_block2[y_dst + x], conv_params->round_1);
+                  tmp >>= 1;
+                  tmp -= (1 << (offset_bits - conv_params->round_1)) +
+                      (1 << (offset_bits - conv_params->round_1 - 1));
+                  dst[y * dst_stride + x] =
+                      clip_pixel(ROUND_POWER_OF_TWO(tmp, round_bits));
+              }
+          }
+      }
+  } else {
+      for (int i = 0; i < dst16_stride * h; ++i) {
+          dst16[i] = ROUND_POWER_OF_TWO(im_block2[i], conv_params->round_1);
       }
-    }
   }
 }
 
